"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AminoConverter = void 0;

var _helpers = require("@osmonauts/helpers");

var _endpoint = require("../../base/v1beta1/endpoint");

var AminoConverter = {
  "/akash.deployment.v1beta1.MsgCreateDeployment": {
    aminoType: "/akash.deployment.v1beta1.MsgCreateDeployment",
    toAmino: function toAmino(_ref) {
      var id = _ref.id,
          groups = _ref.groups,
          version = _ref.version,
          deposit = _ref.deposit;
      return {
        id: {
          owner: id.owner,
          dseq: id.dseq.toString()
        },
        groups: groups.map(function (el0) {
          return {
            name: el0.name,
            requirements: {
              signed_by: {
                all_of: el0.requirements.signedBy.allOf,
                any_of: el0.requirements.signedBy.anyOf
              },
              attributes: el0.requirements.attributes.map(function (el1) {
                return {
                  key: el1.key,
                  value: el1.value
                };
              })
            },
            resources: el0.resources.map(function (el1) {
              return {
                resources: {
                  cpu: {
                    units: {
                      val: el1.resources.cpu.units.val
                    },
                    attributes: el1.resources.cpu.attributes.map(function (el2) {
                      return {
                        key: el2.key,
                        value: el2.value
                      };
                    })
                  },
                  memory: {
                    quantity: {
                      val: el1.resources.memory.quantity.val
                    },
                    attributes: el1.resources.memory.attributes.map(function (el2) {
                      return {
                        key: el2.key,
                        value: el2.value
                      };
                    })
                  },
                  storage: {
                    quantity: {
                      val: el1.resources.storage.quantity.val
                    },
                    attributes: el1.resources.storage.attributes.map(function (el2) {
                      return {
                        key: el2.key,
                        value: el2.value
                      };
                    })
                  },
                  endpoints: el1.resources.endpoints.map(function (el2) {
                    return {
                      kind: el2.kind
                    };
                  })
                },
                count: el1.count,
                price: {
                  denom: el1.price.denom,
                  amount: _helpers.Long.fromNumber(el1.price.amount).toString()
                }
              };
            })
          };
        }),
        version: version,
        deposit: {
          denom: deposit.denom,
          amount: _helpers.Long.fromNumber(deposit.amount).toString()
        }
      };
    },
    fromAmino: function fromAmino(_ref2) {
      var id = _ref2.id,
          groups = _ref2.groups,
          version = _ref2.version,
          deposit = _ref2.deposit;
      return {
        id: {
          owner: id.owner,
          dseq: _helpers.Long.fromString(id.dseq)
        },
        groups: groups.map(function (el0) {
          return {
            name: el0.name,
            requirements: {
              signedBy: {
                allOf: el0.requirements.signed_by.all_of,
                anyOf: el0.requirements.signed_by.any_of
              },
              attributes: el0.requirements.attributes.map(function (el2) {
                return {
                  key: el2.key,
                  value: el2.value
                };
              })
            },
            resources: el0.resources.map(function (el1) {
              return {
                resources: {
                  cpu: {
                    units: {
                      val: el1.resources.cpu.units.val
                    },
                    attributes: el1.resources.cpu.attributes.map(function (el4) {
                      return {
                        key: el4.key,
                        value: el4.value
                      };
                    })
                  },
                  memory: {
                    quantity: {
                      val: el1.resources.memory.quantity.val
                    },
                    attributes: el1.resources.memory.attributes.map(function (el4) {
                      return {
                        key: el4.key,
                        value: el4.value
                      };
                    })
                  },
                  storage: {
                    quantity: {
                      val: el1.resources.storage.quantity.val
                    },
                    attributes: el1.resources.storage.attributes.map(function (el4) {
                      return {
                        key: el4.key,
                        value: el4.value
                      };
                    })
                  },
                  endpoints: el1.resources.endpoints.map(function (el3) {
                    return {
                      kind: (0, _endpoint.endpoint_KindFromJSON)(el3.kind)
                    };
                  })
                },
                count: el1.count,
                price: {
                  denom: el1.price.denom,
                  amount: el1.price.amount
                }
              };
            })
          };
        }),
        version: version,
        deposit: {
          denom: deposit.denom,
          amount: deposit.amount
        }
      };
    }
  },
  "/akash.deployment.v1beta1.MsgDepositDeployment": {
    aminoType: "/akash.deployment.v1beta1.MsgDepositDeployment",
    toAmino: function toAmino(_ref3) {
      var id = _ref3.id,
          amount = _ref3.amount;
      return {
        id: {
          owner: id.owner,
          dseq: id.dseq.toString()
        },
        amount: {
          denom: amount.denom,
          amount: _helpers.Long.fromNumber(amount.amount).toString()
        }
      };
    },
    fromAmino: function fromAmino(_ref4) {
      var id = _ref4.id,
          amount = _ref4.amount;
      return {
        id: {
          owner: id.owner,
          dseq: _helpers.Long.fromString(id.dseq)
        },
        amount: {
          denom: amount.denom,
          amount: amount.amount
        }
      };
    }
  },
  "/akash.deployment.v1beta1.MsgUpdateDeployment": {
    aminoType: "/akash.deployment.v1beta1.MsgUpdateDeployment",
    toAmino: function toAmino(_ref5) {
      var id = _ref5.id,
          groups = _ref5.groups,
          version = _ref5.version;
      return {
        id: {
          owner: id.owner,
          dseq: id.dseq.toString()
        },
        groups: groups.map(function (el0) {
          return {
            name: el0.name,
            requirements: {
              signed_by: {
                all_of: el0.requirements.signedBy.allOf,
                any_of: el0.requirements.signedBy.anyOf
              },
              attributes: el0.requirements.attributes.map(function (el1) {
                return {
                  key: el1.key,
                  value: el1.value
                };
              })
            },
            resources: el0.resources.map(function (el1) {
              return {
                resources: {
                  cpu: {
                    units: {
                      val: el1.resources.cpu.units.val
                    },
                    attributes: el1.resources.cpu.attributes.map(function (el2) {
                      return {
                        key: el2.key,
                        value: el2.value
                      };
                    })
                  },
                  memory: {
                    quantity: {
                      val: el1.resources.memory.quantity.val
                    },
                    attributes: el1.resources.memory.attributes.map(function (el2) {
                      return {
                        key: el2.key,
                        value: el2.value
                      };
                    })
                  },
                  storage: {
                    quantity: {
                      val: el1.resources.storage.quantity.val
                    },
                    attributes: el1.resources.storage.attributes.map(function (el2) {
                      return {
                        key: el2.key,
                        value: el2.value
                      };
                    })
                  },
                  endpoints: el1.resources.endpoints.map(function (el2) {
                    return {
                      kind: el2.kind
                    };
                  })
                },
                count: el1.count,
                price: {
                  denom: el1.price.denom,
                  amount: _helpers.Long.fromNumber(el1.price.amount).toString()
                }
              };
            })
          };
        }),
        version: version
      };
    },
    fromAmino: function fromAmino(_ref6) {
      var id = _ref6.id,
          groups = _ref6.groups,
          version = _ref6.version;
      return {
        id: {
          owner: id.owner,
          dseq: _helpers.Long.fromString(id.dseq)
        },
        groups: groups.map(function (el0) {
          return {
            name: el0.name,
            requirements: {
              signedBy: {
                allOf: el0.requirements.signed_by.all_of,
                anyOf: el0.requirements.signed_by.any_of
              },
              attributes: el0.requirements.attributes.map(function (el2) {
                return {
                  key: el2.key,
                  value: el2.value
                };
              })
            },
            resources: el0.resources.map(function (el1) {
              return {
                resources: {
                  cpu: {
                    units: {
                      val: el1.resources.cpu.units.val
                    },
                    attributes: el1.resources.cpu.attributes.map(function (el4) {
                      return {
                        key: el4.key,
                        value: el4.value
                      };
                    })
                  },
                  memory: {
                    quantity: {
                      val: el1.resources.memory.quantity.val
                    },
                    attributes: el1.resources.memory.attributes.map(function (el4) {
                      return {
                        key: el4.key,
                        value: el4.value
                      };
                    })
                  },
                  storage: {
                    quantity: {
                      val: el1.resources.storage.quantity.val
                    },
                    attributes: el1.resources.storage.attributes.map(function (el4) {
                      return {
                        key: el4.key,
                        value: el4.value
                      };
                    })
                  },
                  endpoints: el1.resources.endpoints.map(function (el3) {
                    return {
                      kind: (0, _endpoint.endpoint_KindFromJSON)(el3.kind)
                    };
                  })
                },
                count: el1.count,
                price: {
                  denom: el1.price.denom,
                  amount: el1.price.amount
                }
              };
            })
          };
        }),
        version: version
      };
    }
  },
  "/akash.deployment.v1beta1.MsgCloseDeployment": {
    aminoType: "/akash.deployment.v1beta1.MsgCloseDeployment",
    toAmino: function toAmino(_ref7) {
      var id = _ref7.id;
      return {
        id: {
          owner: id.owner,
          dseq: id.dseq.toString()
        }
      };
    },
    fromAmino: function fromAmino(_ref8) {
      var id = _ref8.id;
      return {
        id: {
          owner: id.owner,
          dseq: _helpers.Long.fromString(id.dseq)
        }
      };
    }
  },
  "/akash.deployment.v1beta1.MsgCloseGroup": {
    aminoType: "/akash.deployment.v1beta1.MsgCloseGroup",
    toAmino: function toAmino(_ref9) {
      var id = _ref9.id;
      return {
        id: {
          owner: id.owner,
          dseq: id.dseq.toString(),
          gseq: id.gseq
        }
      };
    },
    fromAmino: function fromAmino(_ref10) {
      var id = _ref10.id;
      return {
        id: {
          owner: id.owner,
          dseq: _helpers.Long.fromString(id.dseq),
          gseq: id.gseq
        }
      };
    }
  },
  "/akash.deployment.v1beta1.MsgPauseGroup": {
    aminoType: "/akash.deployment.v1beta1.MsgPauseGroup",
    toAmino: function toAmino(_ref11) {
      var id = _ref11.id;
      return {
        id: {
          owner: id.owner,
          dseq: id.dseq.toString(),
          gseq: id.gseq
        }
      };
    },
    fromAmino: function fromAmino(_ref12) {
      var id = _ref12.id;
      return {
        id: {
          owner: id.owner,
          dseq: _helpers.Long.fromString(id.dseq),
          gseq: id.gseq
        }
      };
    }
  },
  "/akash.deployment.v1beta1.MsgStartGroup": {
    aminoType: "/akash.deployment.v1beta1.MsgStartGroup",
    toAmino: function toAmino(_ref13) {
      var id = _ref13.id;
      return {
        id: {
          owner: id.owner,
          dseq: id.dseq.toString(),
          gseq: id.gseq
        }
      };
    },
    fromAmino: function fromAmino(_ref14) {
      var id = _ref14.id;
      return {
        id: {
          owner: id.owner,
          dseq: _helpers.Long.fromString(id.dseq),
          gseq: id.gseq
        }
      };
    }
  }
};
exports.AminoConverter = AminoConverter;