"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resource = exports.MsgStartGroupResponse = exports.MsgStartGroup = exports.MsgPauseGroupResponse = exports.MsgPauseGroup = exports.MsgCloseGroupResponse = exports.MsgCloseGroup = exports.Group_State = exports.GroupSpec = exports.GroupID = exports.Group = void 0;
exports.group_StateFromJSON = group_StateFromJSON;
exports.group_StateToJSON = group_StateToJSON;

var _attribute = require("../../base/v1beta1/attribute");

var _resource = require("../../base/v1beta1/resource");

var _coin = require("../../../cosmos/base/v1beta1/coin");

var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));

var _helpers = require("@osmonauts/helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/** State is an enum which refers to state of group */
var Group_State;
exports.Group_State = Group_State;

(function (Group_State) {
  Group_State[Group_State["invalid"] = 0] = "invalid";
  Group_State[Group_State["open"] = 1] = "open";
  Group_State[Group_State["paused"] = 2] = "paused";
  Group_State[Group_State["insufficient_funds"] = 3] = "insufficient_funds";
  Group_State[Group_State["closed"] = 4] = "closed";
  Group_State[Group_State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Group_State || (exports.Group_State = Group_State = {}));

function group_StateFromJSON(object) {
  switch (object) {
    case 0:
    case "invalid":
      return Group_State.invalid;

    case 1:
    case "open":
      return Group_State.open;

    case 2:
    case "paused":
      return Group_State.paused;

    case 3:
    case "insufficient_funds":
      return Group_State.insufficient_funds;

    case 4:
    case "closed":
      return Group_State.closed;

    case -1:
    case "UNRECOGNIZED":
    default:
      return Group_State.UNRECOGNIZED;
  }
}

function group_StateToJSON(object) {
  switch (object) {
    case Group_State.invalid:
      return "invalid";

    case Group_State.open:
      return "open";

    case Group_State.paused:
      return "paused";

    case Group_State.insufficient_funds:
      return "insufficient_funds";

    case Group_State.closed:
      return "closed";

    default:
      return "UNKNOWN";
  }
}
/** MsgCloseGroup defines SDK message to close a single Group within a Deployment. */


function createBaseMsgCloseGroup() {
  return {
    id: undefined
  };
}

var MsgCloseGroup = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.id !== undefined) {
      GroupID.encode(message.id, writer.uint32(10).fork()).ldelim();
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgCloseGroup();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.id = GroupID.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      id: (0, _helpers.isSet)(object.id) ? GroupID.fromJSON(object.id) : undefined
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.id !== undefined && (obj.id = message.id ? GroupID.toJSON(message.id) : undefined);
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var message = createBaseMsgCloseGroup();
    message.id = object.id !== undefined && object.id !== null ? GroupID.fromPartial(object.id) : undefined;
    return message;
  }
};
exports.MsgCloseGroup = MsgCloseGroup;

function createBaseMsgCloseGroupResponse() {
  return {};
}

var MsgCloseGroupResponse = {
  encode: function encode(_) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgCloseGroupResponse();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(_) {
    return {};
  },
  toJSON: function toJSON(_) {
    var obj = {};
    return obj;
  },
  fromPartial: function fromPartial(_) {
    var message = createBaseMsgCloseGroupResponse();
    return message;
  }
};
exports.MsgCloseGroupResponse = MsgCloseGroupResponse;

function createBaseMsgPauseGroup() {
  return {
    id: undefined
  };
}

var MsgPauseGroup = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.id !== undefined) {
      GroupID.encode(message.id, writer.uint32(10).fork()).ldelim();
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgPauseGroup();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.id = GroupID.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      id: (0, _helpers.isSet)(object.id) ? GroupID.fromJSON(object.id) : undefined
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.id !== undefined && (obj.id = message.id ? GroupID.toJSON(message.id) : undefined);
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var message = createBaseMsgPauseGroup();
    message.id = object.id !== undefined && object.id !== null ? GroupID.fromPartial(object.id) : undefined;
    return message;
  }
};
exports.MsgPauseGroup = MsgPauseGroup;

function createBaseMsgPauseGroupResponse() {
  return {};
}

var MsgPauseGroupResponse = {
  encode: function encode(_) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgPauseGroupResponse();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(_) {
    return {};
  },
  toJSON: function toJSON(_) {
    var obj = {};
    return obj;
  },
  fromPartial: function fromPartial(_) {
    var message = createBaseMsgPauseGroupResponse();
    return message;
  }
};
exports.MsgPauseGroupResponse = MsgPauseGroupResponse;

function createBaseMsgStartGroup() {
  return {
    id: undefined
  };
}

var MsgStartGroup = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.id !== undefined) {
      GroupID.encode(message.id, writer.uint32(10).fork()).ldelim();
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgStartGroup();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.id = GroupID.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      id: (0, _helpers.isSet)(object.id) ? GroupID.fromJSON(object.id) : undefined
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.id !== undefined && (obj.id = message.id ? GroupID.toJSON(message.id) : undefined);
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var message = createBaseMsgStartGroup();
    message.id = object.id !== undefined && object.id !== null ? GroupID.fromPartial(object.id) : undefined;
    return message;
  }
};
exports.MsgStartGroup = MsgStartGroup;

function createBaseMsgStartGroupResponse() {
  return {};
}

var MsgStartGroupResponse = {
  encode: function encode(_) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgStartGroupResponse();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(_) {
    return {};
  },
  toJSON: function toJSON(_) {
    var obj = {};
    return obj;
  },
  fromPartial: function fromPartial(_) {
    var message = createBaseMsgStartGroupResponse();
    return message;
  }
};
exports.MsgStartGroupResponse = MsgStartGroupResponse;

function createBaseGroupID() {
  return {
    owner: "",
    dseq: _helpers.Long.UZERO,
    gseq: 0
  };
}

var GroupID = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }

    if (!message.dseq.isZero()) {
      writer.uint32(16).uint64(message.dseq);
    }

    if (message.gseq !== 0) {
      writer.uint32(24).uint32(message.gseq);
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseGroupID();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        case 2:
          message.dseq = reader.uint64();
          break;

        case 3:
          message.gseq = reader.uint32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      owner: (0, _helpers.isSet)(object.owner) ? String(object.owner) : "",
      dseq: (0, _helpers.isSet)(object.dseq) ? _helpers.Long.fromString(object.dseq) : _helpers.Long.UZERO,
      gseq: (0, _helpers.isSet)(object.gseq) ? Number(object.gseq) : 0
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.owner !== undefined && (obj.owner = message.owner);
    message.dseq !== undefined && (obj.dseq = (message.dseq || _helpers.Long.UZERO).toString());
    message.gseq !== undefined && (obj.gseq = Math.round(message.gseq));
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var _object$owner, _object$gseq;

    var message = createBaseGroupID();
    message.owner = (_object$owner = object.owner) !== null && _object$owner !== void 0 ? _object$owner : "";
    message.dseq = object.dseq !== undefined && object.dseq !== null ? _helpers.Long.fromValue(object.dseq) : _helpers.Long.UZERO;
    message.gseq = (_object$gseq = object.gseq) !== null && _object$gseq !== void 0 ? _object$gseq : 0;
    return message;
  }
};
exports.GroupID = GroupID;

function createBaseGroupSpec() {
  return {
    name: "",
    requirements: undefined,
    resources: []
  };
}

var GroupSpec = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }

    if (message.requirements !== undefined) {
      _attribute.PlacementRequirements.encode(message.requirements, writer.uint32(18).fork()).ldelim();
    }

    var _iterator = _createForOfIteratorHelper(message.resources),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var v = _step.value;
        Resource.encode(v, writer.uint32(26).fork()).ldelim();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseGroupSpec();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.requirements = _attribute.PlacementRequirements.decode(reader, reader.uint32());
          break;

        case 3:
          message.resources.push(Resource.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      name: (0, _helpers.isSet)(object.name) ? String(object.name) : "",
      requirements: (0, _helpers.isSet)(object.requirements) ? _attribute.PlacementRequirements.fromJSON(object.requirements) : undefined,
      resources: Array.isArray(object === null || object === void 0 ? void 0 : object.resources) ? object.resources.map(function (e) {
        return Resource.fromJSON(e);
      }) : []
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.name !== undefined && (obj.name = message.name);
    message.requirements !== undefined && (obj.requirements = message.requirements ? _attribute.PlacementRequirements.toJSON(message.requirements) : undefined);

    if (message.resources) {
      obj.resources = message.resources.map(function (e) {
        return e ? Resource.toJSON(e) : undefined;
      });
    } else {
      obj.resources = [];
    }

    return obj;
  },
  fromPartial: function fromPartial(object) {
    var _object$name, _object$resources;

    var message = createBaseGroupSpec();
    message.name = (_object$name = object.name) !== null && _object$name !== void 0 ? _object$name : "";
    message.requirements = object.requirements !== undefined && object.requirements !== null ? _attribute.PlacementRequirements.fromPartial(object.requirements) : undefined;
    message.resources = ((_object$resources = object.resources) === null || _object$resources === void 0 ? void 0 : _object$resources.map(function (e) {
      return Resource.fromPartial(e);
    })) || [];
    return message;
  }
};
exports.GroupSpec = GroupSpec;

function createBaseGroup() {
  return {
    groupId: undefined,
    state: 0,
    groupSpec: undefined,
    createdAt: _helpers.Long.ZERO
  };
}

var Group = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.groupId !== undefined) {
      GroupID.encode(message.groupId, writer.uint32(10).fork()).ldelim();
    }

    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }

    if (message.groupSpec !== undefined) {
      GroupSpec.encode(message.groupSpec, writer.uint32(26).fork()).ldelim();
    }

    if (!message.createdAt.isZero()) {
      writer.uint32(32).int64(message.createdAt);
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseGroup();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.groupId = GroupID.decode(reader, reader.uint32());
          break;

        case 2:
          message.state = reader.int32();
          break;

        case 3:
          message.groupSpec = GroupSpec.decode(reader, reader.uint32());
          break;

        case 4:
          message.createdAt = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      groupId: (0, _helpers.isSet)(object.groupId) ? GroupID.fromJSON(object.groupId) : undefined,
      state: (0, _helpers.isSet)(object.state) ? group_StateFromJSON(object.state) : 0,
      groupSpec: (0, _helpers.isSet)(object.groupSpec) ? GroupSpec.fromJSON(object.groupSpec) : undefined,
      createdAt: (0, _helpers.isSet)(object.createdAt) ? _helpers.Long.fromString(object.createdAt) : _helpers.Long.ZERO
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.groupId !== undefined && (obj.groupId = message.groupId ? GroupID.toJSON(message.groupId) : undefined);
    message.state !== undefined && (obj.state = group_StateToJSON(message.state));
    message.groupSpec !== undefined && (obj.groupSpec = message.groupSpec ? GroupSpec.toJSON(message.groupSpec) : undefined);
    message.createdAt !== undefined && (obj.createdAt = (message.createdAt || _helpers.Long.ZERO).toString());
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var _object$state;

    var message = createBaseGroup();
    message.groupId = object.groupId !== undefined && object.groupId !== null ? GroupID.fromPartial(object.groupId) : undefined;
    message.state = (_object$state = object.state) !== null && _object$state !== void 0 ? _object$state : 0;
    message.groupSpec = object.groupSpec !== undefined && object.groupSpec !== null ? GroupSpec.fromPartial(object.groupSpec) : undefined;
    message.createdAt = object.createdAt !== undefined && object.createdAt !== null ? _helpers.Long.fromValue(object.createdAt) : _helpers.Long.ZERO;
    return message;
  }
};
exports.Group = Group;

function createBaseResource() {
  return {
    resources: undefined,
    count: 0,
    price: undefined
  };
}

var Resource = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.resources !== undefined) {
      _resource.ResourceUnits.encode(message.resources, writer.uint32(10).fork()).ldelim();
    }

    if (message.count !== 0) {
      writer.uint32(16).uint32(message.count);
    }

    if (message.price !== undefined) {
      _coin.Coin.encode(message.price, writer.uint32(26).fork()).ldelim();
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseResource();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.resources = _resource.ResourceUnits.decode(reader, reader.uint32());
          break;

        case 2:
          message.count = reader.uint32();
          break;

        case 3:
          message.price = _coin.Coin.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      resources: (0, _helpers.isSet)(object.resources) ? _resource.ResourceUnits.fromJSON(object.resources) : undefined,
      count: (0, _helpers.isSet)(object.count) ? Number(object.count) : 0,
      price: (0, _helpers.isSet)(object.price) ? _coin.Coin.fromJSON(object.price) : undefined
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.resources !== undefined && (obj.resources = message.resources ? _resource.ResourceUnits.toJSON(message.resources) : undefined);
    message.count !== undefined && (obj.count = Math.round(message.count));
    message.price !== undefined && (obj.price = message.price ? _coin.Coin.toJSON(message.price) : undefined);
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var _object$count;

    var message = createBaseResource();
    message.resources = object.resources !== undefined && object.resources !== null ? _resource.ResourceUnits.fromPartial(object.resources) : undefined;
    message.count = (_object$count = object.count) !== null && _object$count !== void 0 ? _object$count : 0;
    message.price = object.price !== undefined && object.price !== null ? _coin.Coin.fromPartial(object.price) : undefined;
    return message;
  }
};
exports.Resource = Resource;