"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registry = exports.load = exports.MessageComposer = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _group = require("./group");

var _deployment = require("./deployment");

var registry = [["/akash.deployment.v1beta1.MsgCreateDeployment", _deployment.MsgCreateDeployment], ["/akash.deployment.v1beta1.MsgDepositDeployment", _deployment.MsgDepositDeployment], ["/akash.deployment.v1beta1.MsgUpdateDeployment", _deployment.MsgUpdateDeployment], ["/akash.deployment.v1beta1.MsgCloseDeployment", _deployment.MsgCloseDeployment], ["/akash.deployment.v1beta1.MsgCloseGroup", _group.MsgCloseGroup], ["/akash.deployment.v1beta1.MsgPauseGroup", _group.MsgPauseGroup], ["/akash.deployment.v1beta1.MsgStartGroup", _group.MsgStartGroup]];
exports.registry = registry;

var load = function load(protoRegistry) {
  registry.forEach(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
        typeUrl = _ref2[0],
        mod = _ref2[1];

    protoRegistry.register(typeUrl, mod);
  });
};

exports.load = load;
var MessageComposer = {
  encoded: {
    createDeployment: function createDeployment(value) {
      return {
        type_url: "/akash.deployment.v1beta1.MsgCreateDeployment",
        value: _deployment.MsgCreateDeployment.encode(value).finish()
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        type_url: "/akash.deployment.v1beta1.MsgDepositDeployment",
        value: _deployment.MsgDepositDeployment.encode(value).finish()
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        type_url: "/akash.deployment.v1beta1.MsgUpdateDeployment",
        value: _deployment.MsgUpdateDeployment.encode(value).finish()
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        type_url: "/akash.deployment.v1beta1.MsgCloseDeployment",
        value: _deployment.MsgCloseDeployment.encode(value).finish()
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        type_url: "/akash.deployment.v1beta1.MsgCloseGroup",
        value: _group.MsgCloseGroup.encode(value).finish()
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        type_url: "/akash.deployment.v1beta1.MsgPauseGroup",
        value: _group.MsgPauseGroup.encode(value).finish()
      };
    },
    startGroup: function startGroup(value) {
      return {
        type_url: "/akash.deployment.v1beta1.MsgStartGroup",
        value: _group.MsgStartGroup.encode(value).finish()
      };
    }
  },
  withTypeUrl: {
    createDeployment: function createDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCreateDeployment",
        value: value
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgDepositDeployment",
        value: value
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgUpdateDeployment",
        value: value
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCloseDeployment",
        value: value
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCloseGroup",
        value: value
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgPauseGroup",
        value: value
      };
    },
    startGroup: function startGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgStartGroup",
        value: value
      };
    }
  },
  toJSON: {
    createDeployment: function createDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCreateDeployment",
        value: _deployment.MsgCreateDeployment.toJSON(value)
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgDepositDeployment",
        value: _deployment.MsgDepositDeployment.toJSON(value)
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgUpdateDeployment",
        value: _deployment.MsgUpdateDeployment.toJSON(value)
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCloseDeployment",
        value: _deployment.MsgCloseDeployment.toJSON(value)
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCloseGroup",
        value: _group.MsgCloseGroup.toJSON(value)
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgPauseGroup",
        value: _group.MsgPauseGroup.toJSON(value)
      };
    },
    startGroup: function startGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgStartGroup",
        value: _group.MsgStartGroup.toJSON(value)
      };
    }
  },
  fromJSON: {
    createDeployment: function createDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCreateDeployment",
        value: _deployment.MsgCreateDeployment.fromJSON(value)
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgDepositDeployment",
        value: _deployment.MsgDepositDeployment.fromJSON(value)
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgUpdateDeployment",
        value: _deployment.MsgUpdateDeployment.fromJSON(value)
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCloseDeployment",
        value: _deployment.MsgCloseDeployment.fromJSON(value)
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCloseGroup",
        value: _group.MsgCloseGroup.fromJSON(value)
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgPauseGroup",
        value: _group.MsgPauseGroup.fromJSON(value)
      };
    },
    startGroup: function startGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgStartGroup",
        value: _group.MsgStartGroup.fromJSON(value)
      };
    }
  },
  fromPartial: {
    createDeployment: function createDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCreateDeployment",
        value: _deployment.MsgCreateDeployment.fromPartial(value)
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgDepositDeployment",
        value: _deployment.MsgDepositDeployment.fromPartial(value)
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgUpdateDeployment",
        value: _deployment.MsgUpdateDeployment.fromPartial(value)
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCloseDeployment",
        value: _deployment.MsgCloseDeployment.fromPartial(value)
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgCloseGroup",
        value: _group.MsgCloseGroup.fromPartial(value)
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgPauseGroup",
        value: _group.MsgPauseGroup.fromPartial(value)
      };
    },
    startGroup: function startGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta1.MsgStartGroup",
        value: _group.MsgStartGroup.fromPartial(value)
      };
    }
  }
};
exports.MessageComposer = MessageComposer;