"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Group_State = exports.Group = void 0;
exports.group_StateFromJSON = group_StateFromJSON;
exports.group_StateToJSON = group_StateToJSON;

var _groupid = require("./groupid");

var _groupspec = require("./groupspec");

var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));

var _helpers = require("@osmonauts/helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** State is an enum which refers to state of group */
var Group_State;
exports.Group_State = Group_State;

(function (Group_State) {
  Group_State[Group_State["invalid"] = 0] = "invalid";
  Group_State[Group_State["open"] = 1] = "open";
  Group_State[Group_State["paused"] = 2] = "paused";
  Group_State[Group_State["insufficient_funds"] = 3] = "insufficient_funds";
  Group_State[Group_State["closed"] = 4] = "closed";
  Group_State[Group_State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Group_State || (exports.Group_State = Group_State = {}));

function group_StateFromJSON(object) {
  switch (object) {
    case 0:
    case "invalid":
      return Group_State.invalid;

    case 1:
    case "open":
      return Group_State.open;

    case 2:
    case "paused":
      return Group_State.paused;

    case 3:
    case "insufficient_funds":
      return Group_State.insufficient_funds;

    case 4:
    case "closed":
      return Group_State.closed;

    case -1:
    case "UNRECOGNIZED":
    default:
      return Group_State.UNRECOGNIZED;
  }
}

function group_StateToJSON(object) {
  switch (object) {
    case Group_State.invalid:
      return "invalid";

    case Group_State.open:
      return "open";

    case Group_State.paused:
      return "paused";

    case Group_State.insufficient_funds:
      return "insufficient_funds";

    case Group_State.closed:
      return "closed";

    default:
      return "UNKNOWN";
  }
}
/** Group stores group id, state and specifications of group */


function createBaseGroup() {
  return {
    groupId: undefined,
    state: 0,
    groupSpec: undefined,
    createdAt: _helpers.Long.ZERO
  };
}

var Group = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.groupId !== undefined) {
      _groupid.GroupID.encode(message.groupId, writer.uint32(10).fork()).ldelim();
    }

    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }

    if (message.groupSpec !== undefined) {
      _groupspec.GroupSpec.encode(message.groupSpec, writer.uint32(26).fork()).ldelim();
    }

    if (!message.createdAt.isZero()) {
      writer.uint32(32).int64(message.createdAt);
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseGroup();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.groupId = _groupid.GroupID.decode(reader, reader.uint32());
          break;

        case 2:
          message.state = reader.int32();
          break;

        case 3:
          message.groupSpec = _groupspec.GroupSpec.decode(reader, reader.uint32());
          break;

        case 4:
          message.createdAt = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      groupId: (0, _helpers.isSet)(object.groupId) ? _groupid.GroupID.fromJSON(object.groupId) : undefined,
      state: (0, _helpers.isSet)(object.state) ? group_StateFromJSON(object.state) : 0,
      groupSpec: (0, _helpers.isSet)(object.groupSpec) ? _groupspec.GroupSpec.fromJSON(object.groupSpec) : undefined,
      createdAt: (0, _helpers.isSet)(object.createdAt) ? _helpers.Long.fromString(object.createdAt) : _helpers.Long.ZERO
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.groupId !== undefined && (obj.groupId = message.groupId ? _groupid.GroupID.toJSON(message.groupId) : undefined);
    message.state !== undefined && (obj.state = group_StateToJSON(message.state));
    message.groupSpec !== undefined && (obj.groupSpec = message.groupSpec ? _groupspec.GroupSpec.toJSON(message.groupSpec) : undefined);
    message.createdAt !== undefined && (obj.createdAt = (message.createdAt || _helpers.Long.ZERO).toString());
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var _object$state;

    var message = createBaseGroup();
    message.groupId = object.groupId !== undefined && object.groupId !== null ? _groupid.GroupID.fromPartial(object.groupId) : undefined;
    message.state = (_object$state = object.state) !== null && _object$state !== void 0 ? _object$state : 0;
    message.groupSpec = object.groupSpec !== undefined && object.groupSpec !== null ? _groupspec.GroupSpec.fromPartial(object.groupSpec) : undefined;
    message.createdAt = object.createdAt !== undefined && object.createdAt !== null ? _helpers.Long.fromValue(object.createdAt) : _helpers.Long.ZERO;
    return message;
  }
};
exports.Group = Group;