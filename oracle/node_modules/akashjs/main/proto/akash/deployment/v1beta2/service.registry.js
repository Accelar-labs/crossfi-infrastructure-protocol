"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registry = exports.load = exports.MessageComposer = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _deploymentmsg = require("./deploymentmsg");

var _groupmsg = require("./groupmsg");

var registry = [["/akash.deployment.v1beta2.MsgCreateDeployment", _deploymentmsg.MsgCreateDeployment], ["/akash.deployment.v1beta2.MsgDepositDeployment", _deploymentmsg.MsgDepositDeployment], ["/akash.deployment.v1beta2.MsgUpdateDeployment", _deploymentmsg.MsgUpdateDeployment], ["/akash.deployment.v1beta2.MsgCloseDeployment", _deploymentmsg.MsgCloseDeployment], ["/akash.deployment.v1beta2.MsgCloseGroup", _groupmsg.MsgCloseGroup], ["/akash.deployment.v1beta2.MsgPauseGroup", _groupmsg.MsgPauseGroup], ["/akash.deployment.v1beta2.MsgStartGroup", _groupmsg.MsgStartGroup]];
exports.registry = registry;

var load = function load(protoRegistry) {
  registry.forEach(function (_ref) {
    var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
        typeUrl = _ref2[0],
        mod = _ref2[1];

    protoRegistry.register(typeUrl, mod);
  });
};

exports.load = load;
var MessageComposer = {
  encoded: {
    createDeployment: function createDeployment(value) {
      return {
        type_url: "/akash.deployment.v1beta2.MsgCreateDeployment",
        value: _deploymentmsg.MsgCreateDeployment.encode(value).finish()
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        type_url: "/akash.deployment.v1beta2.MsgDepositDeployment",
        value: _deploymentmsg.MsgDepositDeployment.encode(value).finish()
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        type_url: "/akash.deployment.v1beta2.MsgUpdateDeployment",
        value: _deploymentmsg.MsgUpdateDeployment.encode(value).finish()
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        type_url: "/akash.deployment.v1beta2.MsgCloseDeployment",
        value: _deploymentmsg.MsgCloseDeployment.encode(value).finish()
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        type_url: "/akash.deployment.v1beta2.MsgCloseGroup",
        value: _groupmsg.MsgCloseGroup.encode(value).finish()
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        type_url: "/akash.deployment.v1beta2.MsgPauseGroup",
        value: _groupmsg.MsgPauseGroup.encode(value).finish()
      };
    },
    startGroup: function startGroup(value) {
      return {
        type_url: "/akash.deployment.v1beta2.MsgStartGroup",
        value: _groupmsg.MsgStartGroup.encode(value).finish()
      };
    }
  },
  withTypeUrl: {
    createDeployment: function createDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCreateDeployment",
        value: value
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgDepositDeployment",
        value: value
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgUpdateDeployment",
        value: value
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCloseDeployment",
        value: value
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCloseGroup",
        value: value
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgPauseGroup",
        value: value
      };
    },
    startGroup: function startGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgStartGroup",
        value: value
      };
    }
  },
  toJSON: {
    createDeployment: function createDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCreateDeployment",
        value: _deploymentmsg.MsgCreateDeployment.toJSON(value)
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgDepositDeployment",
        value: _deploymentmsg.MsgDepositDeployment.toJSON(value)
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgUpdateDeployment",
        value: _deploymentmsg.MsgUpdateDeployment.toJSON(value)
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCloseDeployment",
        value: _deploymentmsg.MsgCloseDeployment.toJSON(value)
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCloseGroup",
        value: _groupmsg.MsgCloseGroup.toJSON(value)
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgPauseGroup",
        value: _groupmsg.MsgPauseGroup.toJSON(value)
      };
    },
    startGroup: function startGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgStartGroup",
        value: _groupmsg.MsgStartGroup.toJSON(value)
      };
    }
  },
  fromJSON: {
    createDeployment: function createDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCreateDeployment",
        value: _deploymentmsg.MsgCreateDeployment.fromJSON(value)
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgDepositDeployment",
        value: _deploymentmsg.MsgDepositDeployment.fromJSON(value)
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgUpdateDeployment",
        value: _deploymentmsg.MsgUpdateDeployment.fromJSON(value)
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCloseDeployment",
        value: _deploymentmsg.MsgCloseDeployment.fromJSON(value)
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCloseGroup",
        value: _groupmsg.MsgCloseGroup.fromJSON(value)
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgPauseGroup",
        value: _groupmsg.MsgPauseGroup.fromJSON(value)
      };
    },
    startGroup: function startGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgStartGroup",
        value: _groupmsg.MsgStartGroup.fromJSON(value)
      };
    }
  },
  fromPartial: {
    createDeployment: function createDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCreateDeployment",
        value: _deploymentmsg.MsgCreateDeployment.fromPartial(value)
      };
    },
    depositDeployment: function depositDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgDepositDeployment",
        value: _deploymentmsg.MsgDepositDeployment.fromPartial(value)
      };
    },
    updateDeployment: function updateDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgUpdateDeployment",
        value: _deploymentmsg.MsgUpdateDeployment.fromPartial(value)
      };
    },
    closeDeployment: function closeDeployment(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCloseDeployment",
        value: _deploymentmsg.MsgCloseDeployment.fromPartial(value)
      };
    },
    closeGroup: function closeGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgCloseGroup",
        value: _groupmsg.MsgCloseGroup.fromPartial(value)
      };
    },
    pauseGroup: function pauseGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgPauseGroup",
        value: _groupmsg.MsgPauseGroup.fromPartial(value)
      };
    },
    startGroup: function startGroup(value) {
      return {
        typeUrl: "/akash.deployment.v1beta2.MsgStartGroup",
        value: _groupmsg.MsgStartGroup.fromPartial(value)
      };
    }
  }
};
exports.MessageComposer = MessageComposer;