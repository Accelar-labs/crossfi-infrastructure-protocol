"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MsgRevokeCertificateResponse = exports.MsgRevokeCertificate = exports.MsgCreateCertificateResponse = exports.MsgCreateCertificate = exports.Certificate_State = exports.CertificateID = exports.CertificateFilter = exports.Certificate = void 0;
exports.certificate_StateFromJSON = certificate_StateFromJSON;
exports.certificate_StateToJSON = certificate_StateToJSON;

var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));

var _helpers = require("@osmonauts/helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/** State is an enum which refers to state of deployment */
var Certificate_State;
exports.Certificate_State = Certificate_State;

(function (Certificate_State) {
  Certificate_State[Certificate_State["invalid"] = 0] = "invalid";
  Certificate_State[Certificate_State["valid"] = 1] = "valid";
  Certificate_State[Certificate_State["revoked"] = 2] = "revoked";
  Certificate_State[Certificate_State["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Certificate_State || (exports.Certificate_State = Certificate_State = {}));

function certificate_StateFromJSON(object) {
  switch (object) {
    case 0:
    case "invalid":
      return Certificate_State.invalid;

    case 1:
    case "valid":
      return Certificate_State.valid;

    case 2:
    case "revoked":
      return Certificate_State.revoked;

    case -1:
    case "UNRECOGNIZED":
    default:
      return Certificate_State.UNRECOGNIZED;
  }
}

function certificate_StateToJSON(object) {
  switch (object) {
    case Certificate_State.invalid:
      return "invalid";

    case Certificate_State.valid:
      return "valid";

    case Certificate_State.revoked:
      return "revoked";

    default:
      return "UNKNOWN";
  }
}
/** CertificateID stores owner and sequence number */


function createBaseCertificateID() {
  return {
    owner: "",
    serial: ""
  };
}

var CertificateID = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }

    if (message.serial !== "") {
      writer.uint32(18).string(message.serial);
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseCertificateID();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        case 2:
          message.serial = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      owner: (0, _helpers.isSet)(object.owner) ? String(object.owner) : "",
      serial: (0, _helpers.isSet)(object.serial) ? String(object.serial) : ""
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.owner !== undefined && (obj.owner = message.owner);
    message.serial !== undefined && (obj.serial = message.serial);
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var _object$owner, _object$serial;

    var message = createBaseCertificateID();
    message.owner = (_object$owner = object.owner) !== null && _object$owner !== void 0 ? _object$owner : "";
    message.serial = (_object$serial = object.serial) !== null && _object$serial !== void 0 ? _object$serial : "";
    return message;
  }
};
exports.CertificateID = CertificateID;

function createBaseCertificate() {
  return {
    state: 0,
    cert: new Uint8Array(),
    pubkey: new Uint8Array()
  };
}

var Certificate = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }

    if (message.cert.length !== 0) {
      writer.uint32(26).bytes(message.cert);
    }

    if (message.pubkey.length !== 0) {
      writer.uint32(34).bytes(message.pubkey);
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseCertificate();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 2:
          message.state = reader.int32();
          break;

        case 3:
          message.cert = reader.bytes();
          break;

        case 4:
          message.pubkey = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      state: (0, _helpers.isSet)(object.state) ? certificate_StateFromJSON(object.state) : 0,
      cert: (0, _helpers.isSet)(object.cert) ? (0, _helpers.bytesFromBase64)(object.cert) : new Uint8Array(),
      pubkey: (0, _helpers.isSet)(object.pubkey) ? (0, _helpers.bytesFromBase64)(object.pubkey) : new Uint8Array()
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.state !== undefined && (obj.state = certificate_StateToJSON(message.state));
    message.cert !== undefined && (obj.cert = (0, _helpers.base64FromBytes)(message.cert !== undefined ? message.cert : new Uint8Array()));
    message.pubkey !== undefined && (obj.pubkey = (0, _helpers.base64FromBytes)(message.pubkey !== undefined ? message.pubkey : new Uint8Array()));
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var _object$state, _object$cert, _object$pubkey;

    var message = createBaseCertificate();
    message.state = (_object$state = object.state) !== null && _object$state !== void 0 ? _object$state : 0;
    message.cert = (_object$cert = object.cert) !== null && _object$cert !== void 0 ? _object$cert : new Uint8Array();
    message.pubkey = (_object$pubkey = object.pubkey) !== null && _object$pubkey !== void 0 ? _object$pubkey : new Uint8Array();
    return message;
  }
};
exports.Certificate = Certificate;

function createBaseCertificateFilter() {
  return {
    owner: "",
    serial: "",
    state: ""
  };
}

var CertificateFilter = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }

    if (message.serial !== "") {
      writer.uint32(18).string(message.serial);
    }

    if (message.state !== "") {
      writer.uint32(26).string(message.state);
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseCertificateFilter();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        case 2:
          message.serial = reader.string();
          break;

        case 3:
          message.state = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      owner: (0, _helpers.isSet)(object.owner) ? String(object.owner) : "",
      serial: (0, _helpers.isSet)(object.serial) ? String(object.serial) : "",
      state: (0, _helpers.isSet)(object.state) ? String(object.state) : ""
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.owner !== undefined && (obj.owner = message.owner);
    message.serial !== undefined && (obj.serial = message.serial);
    message.state !== undefined && (obj.state = message.state);
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var _object$owner2, _object$serial2, _object$state2;

    var message = createBaseCertificateFilter();
    message.owner = (_object$owner2 = object.owner) !== null && _object$owner2 !== void 0 ? _object$owner2 : "";
    message.serial = (_object$serial2 = object.serial) !== null && _object$serial2 !== void 0 ? _object$serial2 : "";
    message.state = (_object$state2 = object.state) !== null && _object$state2 !== void 0 ? _object$state2 : "";
    return message;
  }
};
exports.CertificateFilter = CertificateFilter;

function createBaseMsgCreateCertificate() {
  return {
    owner: "",
    cert: new Uint8Array(),
    pubkey: new Uint8Array()
  };
}

var MsgCreateCertificate = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }

    if (message.cert.length !== 0) {
      writer.uint32(18).bytes(message.cert);
    }

    if (message.pubkey.length !== 0) {
      writer.uint32(26).bytes(message.pubkey);
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgCreateCertificate();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        case 2:
          message.cert = reader.bytes();
          break;

        case 3:
          message.pubkey = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      owner: (0, _helpers.isSet)(object.owner) ? String(object.owner) : "",
      cert: (0, _helpers.isSet)(object.cert) ? (0, _helpers.bytesFromBase64)(object.cert) : new Uint8Array(),
      pubkey: (0, _helpers.isSet)(object.pubkey) ? (0, _helpers.bytesFromBase64)(object.pubkey) : new Uint8Array()
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.owner !== undefined && (obj.owner = message.owner);
    message.cert !== undefined && (obj.cert = (0, _helpers.base64FromBytes)(message.cert !== undefined ? message.cert : new Uint8Array()));
    message.pubkey !== undefined && (obj.pubkey = (0, _helpers.base64FromBytes)(message.pubkey !== undefined ? message.pubkey : new Uint8Array()));
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var _object$owner3, _object$cert2, _object$pubkey2;

    var message = createBaseMsgCreateCertificate();
    message.owner = (_object$owner3 = object.owner) !== null && _object$owner3 !== void 0 ? _object$owner3 : "";
    message.cert = (_object$cert2 = object.cert) !== null && _object$cert2 !== void 0 ? _object$cert2 : new Uint8Array();
    message.pubkey = (_object$pubkey2 = object.pubkey) !== null && _object$pubkey2 !== void 0 ? _object$pubkey2 : new Uint8Array();
    return message;
  }
};
exports.MsgCreateCertificate = MsgCreateCertificate;

function createBaseMsgCreateCertificateResponse() {
  return {};
}

var MsgCreateCertificateResponse = {
  encode: function encode(_) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgCreateCertificateResponse();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(_) {
    return {};
  },
  toJSON: function toJSON(_) {
    var obj = {};
    return obj;
  },
  fromPartial: function fromPartial(_) {
    var message = createBaseMsgCreateCertificateResponse();
    return message;
  }
};
exports.MsgCreateCertificateResponse = MsgCreateCertificateResponse;

function createBaseMsgRevokeCertificate() {
  return {
    id: undefined
  };
}

var MsgRevokeCertificate = {
  encode: function encode(message) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();

    if (message.id !== undefined) {
      CertificateID.encode(message.id, writer.uint32(10).fork()).ldelim();
    }

    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgRevokeCertificate();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.id = CertificateID.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(object) {
    return {
      id: (0, _helpers.isSet)(object.id) ? CertificateID.fromJSON(object.id) : undefined
    };
  },
  toJSON: function toJSON(message) {
    var obj = {};
    message.id !== undefined && (obj.id = message.id ? CertificateID.toJSON(message.id) : undefined);
    return obj;
  },
  fromPartial: function fromPartial(object) {
    var message = createBaseMsgRevokeCertificate();
    message.id = object.id !== undefined && object.id !== null ? CertificateID.fromPartial(object.id) : undefined;
    return message;
  }
};
exports.MsgRevokeCertificate = MsgRevokeCertificate;

function createBaseMsgRevokeCertificateResponse() {
  return {};
}

var MsgRevokeCertificateResponse = {
  encode: function encode(_) {
    var writer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _m0.Writer.create();
    return writer;
  },
  decode: function decode(input, length) {
    var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    var end = length === undefined ? reader.len : reader.pos + length;
    var message = createBaseMsgRevokeCertificateResponse();

    while (reader.pos < end) {
      var tag = reader.uint32();

      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },
  fromJSON: function fromJSON(_) {
    return {};
  },
  toJSON: function toJSON(_) {
    var obj = {};
    return obj;
  },
  fromPartial: function fromPartial(_) {
    var message = createBaseMsgRevokeCertificateResponse();
    return message;
  }
};
exports.MsgRevokeCertificateResponse = MsgRevokeCertificateResponse;