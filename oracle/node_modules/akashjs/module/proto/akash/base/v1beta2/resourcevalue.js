import * as _m0 from "protobufjs/minimal";
import { isSet, bytesFromBase64, base64FromBytes } from "@osmonauts/helpers";
/** Unit stores cpu, memory and storage metrics */

function createBaseResourceValue() {
  return {
    val: new Uint8Array()
  };
}

export const ResourceValue = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.val.length !== 0) {
      writer.uint32(10).bytes(message.val);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceValue();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.val = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object) {
    return {
      val: isSet(object.val) ? bytesFromBase64(object.val) : new Uint8Array()
    };
  },

  toJSON(message) {
    const obj = {};
    message.val !== undefined && (obj.val = base64FromBytes(message.val !== undefined ? message.val : new Uint8Array()));
    return obj;
  },

  fromPartial(object) {
    const message = createBaseResourceValue();
    message.val = object.val ?? new Uint8Array();
    return message;
  }

};