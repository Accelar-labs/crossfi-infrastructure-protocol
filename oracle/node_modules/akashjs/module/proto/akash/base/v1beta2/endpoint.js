import * as _m0 from "protobufjs/minimal";
import { isSet } from "@osmonauts/helpers";
/** This describes how the endpoint is implemented when the lease is deployed */

export let Endpoint_Kind;

(function (Endpoint_Kind) {
  Endpoint_Kind[Endpoint_Kind["SHARED_HTTP"] = 0] = "SHARED_HTTP";
  Endpoint_Kind[Endpoint_Kind["RANDOM_PORT"] = 1] = "RANDOM_PORT";
  Endpoint_Kind[Endpoint_Kind["LEASED_IP"] = 2] = "LEASED_IP";
  Endpoint_Kind[Endpoint_Kind["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Endpoint_Kind || (Endpoint_Kind = {}));

export function endpoint_KindFromJSON(object) {
  switch (object) {
    case 0:
    case "SHARED_HTTP":
      return Endpoint_Kind.SHARED_HTTP;

    case 1:
    case "RANDOM_PORT":
      return Endpoint_Kind.RANDOM_PORT;

    case 2:
    case "LEASED_IP":
      return Endpoint_Kind.LEASED_IP;

    case -1:
    case "UNRECOGNIZED":
    default:
      return Endpoint_Kind.UNRECOGNIZED;
  }
}
export function endpoint_KindToJSON(object) {
  switch (object) {
    case Endpoint_Kind.SHARED_HTTP:
      return "SHARED_HTTP";

    case Endpoint_Kind.RANDOM_PORT:
      return "RANDOM_PORT";

    case Endpoint_Kind.LEASED_IP:
      return "LEASED_IP";

    default:
      return "UNKNOWN";
  }
}
/** Endpoint describes a publicly accessible IP service */

function createBaseEndpoint() {
  return {
    kind: 0,
    sequenceNumber: 0
  };
}

export const Endpoint = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.kind !== 0) {
      writer.uint32(8).int32(message.kind);
    }

    if (message.sequenceNumber !== 0) {
      writer.uint32(16).uint32(message.sequenceNumber);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEndpoint();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.kind = reader.int32();
          break;

        case 2:
          message.sequenceNumber = reader.uint32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromJSON(object) {
    return {
      kind: isSet(object.kind) ? endpoint_KindFromJSON(object.kind) : 0,
      sequenceNumber: isSet(object.sequenceNumber) ? Number(object.sequenceNumber) : 0
    };
  },

  toJSON(message) {
    const obj = {};
    message.kind !== undefined && (obj.kind = endpoint_KindToJSON(message.kind));
    message.sequenceNumber !== undefined && (obj.sequenceNumber = Math.round(message.sequenceNumber));
    return obj;
  },

  fromPartial(object) {
    const message = createBaseEndpoint();
    message.kind = object.kind ?? 0;
    message.sequenceNumber = object.sequenceNumber ?? 0;
    return message;
  }

};