"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("./utils");

var _client = require("../client/client");

var _generator = _interopRequireDefault(require("@babel/generator"));

var _testUtils = require("../../test-utils");

var expectCode = function expectCode(ast) {
  expect((0, _generator["default"])(ast).code).toMatchSnapshot();
};

it('recursiveNamespace', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
  return _regenerator["default"].wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          expectCode((0, _utils.recursiveNamespace)(['osmosis', 'gamm', 'v1beta', 'pools'].reverse(), [(0, _client.createClient)({
            context: (0, _testUtils.getGenericParseContext)(),
            name: 'getSigningOsmosisClient',
            registries: ['osmosis.gamm.v1beta1', 'osmosis.superfluid.v1beta1', 'osmosis.lockup'],
            aminos: ['osmosis.gamm.v1beta1', 'osmosis.superfluid.v1beta1', 'osmosis.lockup']
          })])[0]);

        case 1:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
})));
describe('safe type names', function () {
  it('My_Name_asd.asdf.Type_rcc.dao.Yolo', function () {
    var name = 'My_Name_asd.asdf.Type_rcc.dao.Yolo';
    var filtered = (0, _utils.renderNameSafely)(name);
    expect(filtered).toEqual('My_Name_Type_Yolo');
  });
  it('dao.Yolo', function () {
    var name = 'dao.Yolo';
    var filtered = (0, _utils.renderNameSafely)(name);
    expect(filtered).toEqual('Yolo');
  });
  it('Yolo', function () {
    var name = 'Yolo';
    var filtered = (0, _utils.renderNameSafely)(name);
    expect(filtered).toEqual('Yolo');
  });
});